#constructor

In Python, a **constructor** is a special method that is automatically called when a new instance (object) of a class is created. The constructor method in Python is named `__init__()`. It is used to initialize the attributes of an object.

### Syntax of the Constructor (`__init__` Method)

Here's the basic structure of a constructor in Python:

```python
class ClassName:
    def __init__(self, parameters):
        # Initialize object attributes
        self.attribute1 = value1
        self.attribute2 = value2
        # etc.
```

- `__init__` is the constructor method. It’s always named `__init__`.
- `self` is the first parameter of `__init__`, and it refers to the instance of the class that is being created. You don’t need to pass `self` when calling the constructor; it’s handled automatically by Python.
- Any additional parameters you define will be passed when creating an instance of the class, and they can be used to initialize attributes.

### Example of a Basic Constructor

Here’s an example of a class with a constructor that initializes some attributes:

```python
class Person:
    def __init__(self, name, age):
        self.name = name  # Initialize the name attribute
        self.age = age    # Initialize the age attribute

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}")
```

### Explanation

- When `Person("Alice", 30)` is called, Python automatically calls `__init__`, passing `"Alice"` to `name` and `30` to `age`.
- The `name` and `age` attributes are set on the new `Person` object.

### Using the Constructor

Here’s how you would create an instance of the `Person` class and access its attributes:

```python
# Create an instance of Person
person1 = Person("Alice", 30)

# Access attributes
print(person1.name)  # Output: Alice
print(person1.age)   # Output: 30

# Call a method
person1.display_info()  # Output: Name: Alice, Age: 30
```

### Constructor with Default Parameters

You can also set default values for parameters in the constructor:


# class Person:
#     def __init__(self, name="Unknown", age=0):
#         self.name = name
#         self.age = age

# # Create a Person with default values
# person2 = Person()
# print(person2.name)  # Output: Unknown
# print(person2.age)   # Output: 0


In this case, if no arguments are provided when creating the object, the constructor will use the default values (`"Unknown"` and `0`).

### Summary

- The `__init__` method is called automatically when an object is created.
- It initializes the object’s attributes.
- You can provide parameters to customize the object upon creation.
- Default values can be used in the constructor to make parameters optional.